#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/power.h>
#include <util/delay.h>

#define N_TRANSDUCERS 24

#define WAIT_LOT(a) __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop")
//14 clock

#define WAIT_MID(a) __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop")
//13 clock

#define WAIT_LIT(a) __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop"); __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop");  __asm__ __volatile__ ("nop")
//9 clock

#define OUTPUT_WAVE(pointer, d)  PORTC = pointer[d]

#define N_BUTTONS 5
#define BUTTON_SENS 50
#define N_FRAMES 29

volatile uint8_t frame = 19;
volatile uint8_t pressed_button = 0;
volatile uint8_t buttonCounter = 0;
volatile bool anyButtonPressed = false;

static uint8_t animation[N_FRAMES][N_TRANSDUCERS] = //29x24
{
    {0x6,0xc,0xc,0xc,0xc,0xc,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x3,0x3,0x3,0x3,0x3,0x6,0x6,0x6,0x6,0x6,0x6},
    {0x6,0x6,0x6,0x6,0x6,0xc,0xc,0xc,0xc,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x3,0x3,0x3,0x3,0x6,0x6,0x6},
    {0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0xc,0xc,0xc,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x3,0x3,0x3},
    {0x3,0x3,0x3,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0xc,0xc,0xc,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9},
    {0x9,0x9,0x9,0x9,0x3,0x3,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0xc,0xc,0x9,0x9,0x9,0x9,0x9,0x9},
    {0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x3,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0xc,0x9,0x9,0x9},
    {0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x3,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0xc},
    {0x6,0x6,0x6,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6},
    {0x6,0x6,0x6,0x6,0x6,0x6,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0x6,0x6,0x6,0x6,0x6},
    {0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0x6,0x6},
    {0xc,0xc,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc},
    {0x9,0x9,0xc,0xc,0xc,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9},
    {0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9},
    {0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc,0xc,0x6,0x6,0x6,0x6,0x6,0x6,0x6,0x3,0x3,0x3,0x3,0x3},
    {0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc,0xc,0xc,0x6,0x6,0x6,0x6,0x6,0x6,0x3,0x3,0x3},
    {0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc,0xc,0xc,0x6,0x6,0x6,0x6,0x6,0x6,0x3},
    {0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc,0xc,0xc,0x6,0x6,0x6,0x6},
    {0x6,0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc,0xc,0xc,0x6,0x6},
    {0x6,0x6,0x6,0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc},
    {0xc,0x6,0x6,0x6,0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc},
    {0xc,0xc,0xc,0xc,0x6,0x6,0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9},
    {0x9,0x9,0x9,0xc,0xc,0xc,0xc,0x6,0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9},
    {0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0xc,0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9},
    {0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x3},
    {0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc,0x6,0x6,0x3,0x3,0x3,0x3,0x3},
    {0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0x6,0x3,0x3,0x3},
    {0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0x6,0x6},
    {0x6,0x6,0x3,0x3,0x3,0x3,0x3,0x3,0x3,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0x9,0xc,0xc,0xc}
};

void initTimer() {
    TCCR0A = (1 << WGM01);  // CTC mode
    TCCR0B = (1 << CS01) | (1 << CS00);  // Prescaler 64
    OCR0A = 250;  // Compare value for ~1ms interrupt
    TIMSK0 = (1 << OCIE0A);  // Enable compare interrupt
}

void initButtons() {
    // Set buttons as input with pull-up resistors
    DDRD &= ~(1 << PD0) & ~(1 << PD1) & ~(1 << PD2) & ~(1 << PD3) & ~(1 << PD4);
    PORTD |= (1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3) | (1 << PD4);
}

ISR(TIMER0_COMPA_vect) {
    uint8_t buttonState = ~PIND & ((1 << PD0) | (1 << PD1) | (1 << PD2) | (1 << PD3) | (1 << PD4));
    if (buttonState) {
        if (!anyButtonPressed) {
            pressed_button = buttonState;
            anyButtonPressed = true;
        }
    } else {
        anyButtonPressed = false;
    }
}

void setup() {
    // Initialize the microcontroller
    cli();
    clock_prescale_set(clock_div_1);
    DDRC = 0xFF;  // All PORTC as output
    initButtons();
    initTimer();
    sei();
}

void loop() {
    for (uint8_t c = 0; c < N_TRANSDUCERS; c++) {
        switch (c) {
            case 7:
            case 15:
            case 23:
                OUTPUT_WAVE(animation[frame], c);
                WAIT_LOT(0);
                break;
            case 3:
            case 11:
            case 19:
                OUTPUT_WAVE(animation[frame], c);
                WAIT_MID(0);
                break;
            default:
                OUTPUT_WAVE(animation[frame], c);
                WAIT_LIT(0);
                break;
        }
    }

    if (anyButtonPressed) {
        switch (pressed_button) {
            case (1 << PD0):
                frame = 0;
                break;
            case (1 << PD1):
                frame = 5;
                break;
            case (1 << PD2):
                frame = 10;
                break;
            case (1 << PD3):
                frame = 15;
                break;
            case (1 << PD4):
                frame = 20;
                break;
            default:
                break;
        }
    }
}

/*
int main() {
    setup();
    while (1) {
        loop();
    }
    return 0;
}
*/